/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Library.Application.Project.Publications;

import Database.Connection.Helper.DatabaseConnectionService;
import Database.Connection.Helper.Interfaces.*;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jordy
 */
public class PublicationDetailsPage extends javax.swing.JFrame {
    private final JFrame m_StudentPublicationsPage;
    private final String m_TableName;
    private final String m_UserId;
    private final String m_BookId;
    private DefaultTableModel m_Model;
    private final PublicationsCheckoutStrategy m_PublicationsCheckoutStrategy;
    private final UserType m_UserType;

    /**
     * Creates new form StudentPublicationDetailsPage
     * @param studentPublicationsPage
     * @param tableName
     * @param userId
     * @param bookId
     * @param userType
     */
    public PublicationDetailsPage(JFrame studentPublicationsPage, 
            String tableName, 
            String userId,
            String bookId,
            UserType userType) {
        initComponents();
        this.m_StudentPublicationsPage = studentPublicationsPage;
        this.m_TableName = tableName;
        this.m_UserId = userId;
        this.m_BookId = bookId;
        this.m_UserType = userType;
        this.m_PublicationsCheckoutStrategy = CreateCheckoutStrategy();
        PopulateBookDetails(tableName, bookId);
        
        SetEnabledOfButtons();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        bookDetailsTable = new javax.swing.JTable();
        goBackButton = new javax.swing.JButton();
        checkoutButton = new javax.swing.JButton();
        returnButton = new javax.swing.JButton();
        addToWaitlistButton = new javax.swing.JButton();
        renewButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        bookDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(bookDetailsTable);

        goBackButton.setText("go back");
        goBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goBackButtonActionPerformed(evt);
            }
        });

        checkoutButton.setText("check out");
        checkoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkoutButtonActionPerformed(evt);
            }
        });

        returnButton.setText("return");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        addToWaitlistButton.setText("add to wait list");
        addToWaitlistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToWaitlistButtonActionPerformed(evt);
            }
        });

        renewButton.setText("renew");
        renewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renewButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(goBackButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(checkoutButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(returnButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addToWaitlistButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(renewButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(48, 48, 48))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(checkoutButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addToWaitlistButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(renewButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(returnButton)
                    .addComponent(goBackButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void goBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goBackButtonActionPerformed
        this.dispose();
        m_StudentPublicationsPage.setVisible(true);
    }//GEN-LAST:event_goBackButtonActionPerformed

    private void checkoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkoutButtonActionPerformed
        m_PublicationsCheckoutStrategy.CheckoutBook(m_BookId, m_UserId);
        SetEnabledOfButtons();
        ClearAllRowsInTable();
        PopulateBookDetails(m_TableName, m_BookId);
    }//GEN-LAST:event_checkoutButtonActionPerformed

    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
        m_PublicationsCheckoutStrategy.ReturnBook(m_BookId, m_UserId);
        SetEnabledOfButtons();
        ClearAllRowsInTable();
        PopulateBookDetails(m_TableName, m_BookId);
    }//GEN-LAST:event_returnButtonActionPerformed

    private void addToWaitlistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToWaitlistButtonActionPerformed
        m_PublicationsCheckoutStrategy.AddBookToWaitlist(m_BookId, m_UserId);
        SetEnabledOfButtons();
    }//GEN-LAST:event_addToWaitlistButtonActionPerformed

    private void renewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renewButtonActionPerformed
        m_PublicationsCheckoutStrategy.RenewBook(m_BookId, m_UserId);
        SetEnabledOfButtons();
    }//GEN-LAST:event_renewButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToWaitlistButton;
    private javax.swing.JTable bookDetailsTable;
    private javax.swing.JButton checkoutButton;
    private javax.swing.JButton goBackButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton renewButton;
    private javax.swing.JButton returnButton;
    // End of variables declaration//GEN-END:variables

    private void PopulateBookDetails(String tableName, String bookId) {
        try{
            ArrayList<String> columnNames = GetColumnNamesInTable(tableName);
            ArrayList<String> primaryKeyColumnNames = GetPrimaryKeyColumnNames(tableName);
            CreateTableModel();
            AddBookDetailsToTable(columnNames, 
                    tableName, 
                    primaryKeyColumnNames.get(0),
                    bookId);
        }
        catch (Exception e){
            Logger.getLogger(PublicationDetailsPage.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    private ArrayList<String> GetColumnNamesInTable(String tableName) throws Exception{
        try (IDatabaseConnection connection = DatabaseConnectionService.createDatabaseConnection()){
            try (IDatabaseMetaDataHandler metaData = DatabaseConnectionService.createDatabaseMetaDataHandler(connection)) {
                return metaData.getColumnNames(tableName);
            }
        }
    }
    
    private void CreateTableModel() {
        m_Model = new DefaultTableModel();
        m_Model.addColumn("");
        m_Model.addColumn("");
        bookDetailsTable.setModel(m_Model);
    }

    private void AddBookDetailsToTable(ArrayList<String> columnNames, 
            String tableName,
            String primaryKeyColumnName,
            String bookId) throws Exception{
        try (IDatabaseConnection connection = DatabaseConnectionService.createDatabaseConnection()){
            try (IStatementExecutor stmtExecutor = DatabaseConnectionService.createStatementExecutor(connection)){
                String book = String.format("SELECT * FROM %s WHERE %s = '%s'", 
                        tableName, primaryKeyColumnName, bookId);
                try (IQueryResultSet resultSet = stmtExecutor.executeQuery(book)){
                    resultSet.moveToFirstRow();
                    AddRowToTable(columnNames, resultSet);
                }
            }
        }
    }

    private void AddRowToTable(ArrayList<String> columnNames, final IQueryResultSet resultSetRow) {
        for (String colName : columnNames) {
            m_Model.addRow(new Object[] {colName,
                resultSetRow.getString(colName)});
        }
    }

    private ArrayList<String> GetPrimaryKeyColumnNames(String tableName) throws Exception{
        try (IDatabaseConnection connection = DatabaseConnectionService.createDatabaseConnection()){
            try (IDatabaseMetaDataHandler metaData = DatabaseConnectionService.createDatabaseMetaDataHandler(connection)) {
                return metaData.getPrimaryKeyColumnNames(tableName);
            }
        }
    }

    private PublicationsCheckoutStrategy CreateCheckoutStrategy() {
        return PublicationsCheckoutStrategyFactory.CreatePublicationsCheckoutStrategy(m_TableName, 
                m_UserType);
    }

    private void ClearAllRowsInTable() {
        int rowCount = m_Model.getRowCount();
        for (int i = 0; i < rowCount; i++){
            m_Model.removeRow(0);
        }
    }

    private void SetEnabledOfButtons() {
        checkoutButton.setEnabled(m_PublicationsCheckoutStrategy.CanBookBeCheckedout(m_BookId, m_UserId));
        returnButton.setEnabled(m_PublicationsCheckoutStrategy.CanBookBeReturned(m_BookId, m_UserId));
        renewButton.setEnabled(m_PublicationsCheckoutStrategy.CanBookBeRenewed(m_BookId, m_UserId));
        addToWaitlistButton.setEnabled(m_PublicationsCheckoutStrategy.CanBookBeAddedToWaitList(m_BookId, m_UserId));        
    }
}
