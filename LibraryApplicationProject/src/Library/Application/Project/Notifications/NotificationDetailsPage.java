/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Library.Application.Project.Notifications;

import Database.Connection.Helper.DatabaseConnectionService;
import Database.Connection.Helper.Interfaces.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;

/**
 *
 * @author Prishu
 */
public class NotificationDetailsPage extends javax.swing.JFrame {
    private final JFrame m_UserNotificationsPage;
    private final String m_masterMessageId;
    private static final String m_patronMessageTable = "PATRONMESSAGENOTIFICATIONS";
    private static final String m_patronMessageNo = "PATRONMESSAGENO";
    private static final String m_readFlag = "READFLAG";
    private final String m_patronUniqueMessageNo;

    /**
     * Creates new form NotificationDetailsPage
     * @param userNotificationsPage
     * @param patronUniqueMessageNo
     * @param masterMessageId
     */
    public NotificationDetailsPage(JFrame userNotificationsPage, String patronUniqueMessageNo, 
            String masterMessageId) {
        initComponents();
        this.m_UserNotificationsPage = userNotificationsPage;
        this.m_masterMessageId = masterMessageId;
        this.m_patronUniqueMessageNo = patronUniqueMessageNo;
        
        try {
            PopulateMessageDetailsPage(m_masterMessageId);
            UpdateReadFlag(m_patronUniqueMessageNo);
            } 
        catch (Exception ex) {
            Logger.getLogger(NotificationDetailsPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        messageTextField = new javax.swing.JTextField();
        goBackButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        messageTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageTextFieldActionPerformed(evt);
            }
        });

        goBackButton.setText("Go Back");
        goBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goBackButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(messageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(163, 163, 163)
                        .addComponent(goBackButton)))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(messageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(goBackButton)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void goBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goBackButtonActionPerformed
        this.dispose();
        revalidate();
        m_UserNotificationsPage.setVisible(true);
        
    }//GEN-LAST:event_goBackButtonActionPerformed

    private void messageTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messageTextFieldActionPerformed
        
    }//GEN-LAST:event_messageTextFieldActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton goBackButton;
    private javax.swing.JTextField messageTextField;
    // End of variables declaration//GEN-END:variables

    private void PopulateMessageDetailsPage(String m_masterMessageId) throws Exception{
       IMessageNotificationService messageNotificationService = new MessageNotificationService();
        String masterMessageText = messageNotificationService.ShowMessage(m_masterMessageId);
        messageTextField.setText(masterMessageText);
}

    private void UpdateReadFlag(String patronUniqueMessageNo) throws Exception {
         try(IDatabaseConnection connection = DatabaseConnectionService.createDatabaseConnection()){
            try(IStatementExecutor stmtExecutor = DatabaseConnectionService.createStatementExecutor(connection)){
                String updateReadFlagToY = String.format("UPDATE %s "
                       +"SET %s = 'Y' "
                       +"WHERE %s = '%s'",m_patronMessageTable,m_readFlag,m_patronMessageNo,patronUniqueMessageNo);
                            
                stmtExecutor.executeUpdate(updateReadFlagToY);
            }
        }
        
     }
}
