/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Library.Application.Project.Cameras;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jordy
 */
public class CameraDetailsPage extends javax.swing.JFrame {

    private static final long HOUR = 3600*1000;
    private static final int Week_To_Hours = 7 * 24;
    private static final SimpleDateFormat m_DayOfWeekFormat = new SimpleDateFormat("E");
    private static final SimpleDateFormat m_SimpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    private static final SimpleDateFormat m_OnlyDateFormat = new SimpleDateFormat("yyyy-MM-dd");
    private DefaultTableModel m_Model;
    private final JFrame m_CamerasPage;
    private final String m_UserId;
    private final String m_CameraId;
    
    /**
     * Creates new form CameraDetailsPage
     * @param camerasPage
     * @param userId
     * @param cameraId
     */
    public CameraDetailsPage(JFrame camerasPage,
            String userId,
            String cameraId) {
        initComponents();
        reserveButton.setEnabled(false);
        waitlistButton.setEnabled(false);
        
        this.m_CamerasPage = camerasPage;
        this.m_UserId = userId;
        this.m_CameraId = cameraId;
        CreateTableModel();
        PopulateDetailsPage();
    }
    
    private void CreateTableModel() {
        m_Model = new DefaultTableModel();
        m_Model.addColumn("");
        m_Model.addColumn("");
        detailsTable.setModel(m_Model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        detailsTable = new javax.swing.JTable();
        dateLabel = new javax.swing.JLabel();
        dateSpinner = new javax.swing.JSpinner();
        availabilityButton = new javax.swing.JButton();
        invisibleLabel = new javax.swing.JLabel();
        goBackButton = new javax.swing.JButton();
        reserveButton = new javax.swing.JButton();
        waitlistButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        detailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(detailsTable);

        dateLabel.setText("Pick a date and check availability");

        dateSpinner.setModel(new javax.swing.SpinnerDateModel());

        availabilityButton.setText("Check Availability");
        availabilityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availabilityButtonActionPerformed(evt);
            }
        });

        invisibleLabel.setForeground(new java.awt.Color(204, 0, 0));

        goBackButton.setText("Go Back");
        goBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goBackButtonActionPerformed(evt);
            }
        });

        reserveButton.setText("Reserve");
        reserveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reserveButtonActionPerformed(evt);
            }
        });

        waitlistButton.setText("Add To Waitlist");
        waitlistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                waitlistButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(invisibleLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dateLabel)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(30, 30, 30)
                                        .addComponent(goBackButton)))
                                .addGap(46, 46, 46)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(reserveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(availabilityButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dateSpinner)
                                    .addComponent(waitlistButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(0, 63, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateLabel)
                    .addComponent(dateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(availabilityButton)
                .addGap(29, 29, 29)
                .addComponent(invisibleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(reserveButton)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(goBackButton)
                    .addComponent(waitlistButton))
                .addGap(31, 31, 31))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void availabilityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availabilityButtonActionPerformed
        Date date = (Date)dateSpinner.getValue();
        if(!IsDayFriday(date)){
            invisibleLabel.setText("Please choose a friday!");
            return;
        }
        if(IsCameraAvailable()){
            reserveButton.setEnabled(true);
            waitlistButton.setEnabled(false);
            invisibleLabel.setText("You may reserve the camera!");
            return;
        }
        if(IsCameraReservedByUser(m_UserId)){
            reserveButton.setEnabled(false);
            waitlistButton.setEnabled(false);
            invisibleLabel.setText("You have reserved this camera on the date!");
            return;
        }
        if(IsCameraWaitlistedByUser(m_UserId)){
            reserveButton.setEnabled(false);
            waitlistButton.setEnabled(false);
            invisibleLabel.setText("You have waitlisted this camera on the date!");
            return;
        }
        reserveButton.setEnabled(false);
        waitlistButton.setEnabled(true);
        invisibleLabel.setText("This camera is not available, you may add it to waitlist!");
    }//GEN-LAST:event_availabilityButtonActionPerformed

    private void goBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goBackButtonActionPerformed
        this.dispose();
        this.m_CamerasPage.setVisible(true);
    }//GEN-LAST:event_goBackButtonActionPerformed

    private void reserveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reserveButtonActionPerformed
        Date date = (Date)dateSpinner.getValue();
        if(!IsDayFriday(date)){
            invisibleLabel.setText("Please choose a friday!");
            return;
        }
        try {
            CamerasHelper.ReserveTheCamera(m_UserId, m_CameraId, 
                    getDateWithTimeSetToNineAm(), getEndDate(),
                    getCheckoutEndTime());
            reserveButton.setEnabled(false);
            invisibleLabel.setText("Camera Reserved!");
        }
        catch (Exception e) {
            Logger.getLogger(CameraDetailsPage.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_reserveButtonActionPerformed

    private void waitlistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waitlistButtonActionPerformed
        try {
            CamerasHelper.AddCameraToWaitList(m_UserId, m_CameraId, getDateWithTimeSetToNineAm());
            waitlistButton.setEnabled(false);
            invisibleLabel.setText("Camera added to wait queue!");
        }
        catch (Exception e) {
            Logger.getLogger(CameraDetailsPage.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_waitlistButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton availabilityButton;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JSpinner dateSpinner;
    private javax.swing.JTable detailsTable;
    private javax.swing.JButton goBackButton;
    private javax.swing.JLabel invisibleLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton reserveButton;
    private javax.swing.JButton waitlistButton;
    // End of variables declaration//GEN-END:variables

    private void PopulateDetailsPage() {
        try {
            CamerasHelper.AddCameraDetailsToTable(m_Model, m_CameraId);
        }
        catch (Exception e) {
            Logger.getLogger(CameraDetailsPage.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    private boolean IsDayFriday(Date date) {
        return m_DayOfWeekFormat.format(date).equals("Fri");
    }

    private boolean IsCameraAvailable() {
        try {
            return !CamerasHelper.IsCameraRequestedOnDate(m_CameraId, getDateWithTimeSetToNineAm());
        }
        catch (Exception e) {
            Logger.getLogger(CameraDetailsPage.class.getName()).log(Level.SEVERE, null, e);
        }
        return false;
    }
    
    private String getDateWithTimeSetToNineAm() throws ParseException{
        Date date = (Date)dateSpinner.getValue();
        String onlyDate = m_OnlyDateFormat.format(date);
        Date dateWithTimeSetToNine = m_SimpleDateFormat.parse(onlyDate + " 09:00:00");
        return m_SimpleDateFormat.format(dateWithTimeSetToNine);
    }
    
    private String getEndDate() throws ParseException{
        Date startdate = (Date)dateSpinner.getValue();
        Date endDate = new Date(startdate.getTime() + Week_To_Hours * HOUR);
        String onlyDate = m_OnlyDateFormat.format(endDate);
        Date dateWithTimeSetToSixPm = m_SimpleDateFormat.parse(onlyDate + " 18:00:00");
        return m_SimpleDateFormat.format(dateWithTimeSetToSixPm);
    }
    
    private String getCheckoutEndTime() throws ParseException{
        Date date = (Date)dateSpinner.getValue();
        String onlyDate = m_OnlyDateFormat.format(date);
        Date dateWithTimeSetToNine = m_SimpleDateFormat.parse(onlyDate + " 10:00:00");
        return m_SimpleDateFormat.format(dateWithTimeSetToNine);
    }

    private boolean IsCameraReservedByUser(String m_UserId) {
        try {
            return CamerasHelper.IsCameraRequestedOnDateByUser(m_CameraId, m_UserId, getDateWithTimeSetToNineAm());
        }
        catch (Exception e) {
            Logger.getLogger(CameraDetailsPage.class.getName()).log(Level.SEVERE, null, e);
        }
        return false;
    }

    private boolean IsCameraWaitlistedByUser(String m_UserId) {
        try {
            return CamerasHelper.IsCameraWaitlistedOnDateByUser(m_CameraId, m_UserId, getDateWithTimeSetToNineAm());
        }
        catch (Exception e) {
            Logger.getLogger(CameraDetailsPage.class.getName()).log(Level.SEVERE, null, e);
        }
        return false;
    }
}
